name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            output_name: sqlift-linux-x64
          - os: macos-latest
            output_name: sqlift-macos-x64
          - os: windows-latest
            output_name: sqlift-windows-x64

    steps:
      - uses: actions/checkout@v3

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with Maven
        run: mvn -B package

      - name: Build Native Image (Linux)
        if: runner.os == 'Linux'
        run: |
          native-image --no-fallback \
            -H:+ReportExceptionStackTraces \
            -H:Name=${{ matrix.output_name }} \
            --initialize-at-build-time=cl.playground.cli.CommandLineApp \
            --initialize-at-build-time=picocli \
            -cp target/sqlift.jar:target/lib/* \
            cl.playground.cli.CommandLineApp
      - name: Build Native Image (macOS)
        if: runner.os == 'macOS'
        run: |
          native-image --no-fallback \
            -H:+ReportExceptionStackTraces \
            -H:Name=${{ matrix.output_name }} \
            --initialize-at-build-time=cl.playground.cli.CommandLineApp \
            --initialize-at-build-time=picocli \
            -cp target/sqlift.jar:target/lib/* \
            cl.playground.cli.CommandLineApp
      - name: Build Native Image (M1/M2)
        if: runner.os == 'macOS'
        run: |
          native-image --no-fallback \
            -H:+ReportExceptionStackTraces \
            -H:Name=sqlift-macos-arm64 \
            --initialize-at-build-time=cl.playground.cli.CommandLineApp \
            --initialize-at-build-time=picocli \
            --target aarch64-darwin \
            -cp target/sqlift.jar:target/lib/* \
            cl.playground.cli.CommandLineApp
      - name: Build Native Image (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          native-image `
            --no-fallback `
            -H:+ReportExceptionStackTraces `
            -H:Name=sqlift-windows-x64 `
            --initialize-at-build-time=cl.playground.cli.CommandLineApp `
            --initialize-at-build-time=picocli `
            "-cp" "target/sqlift.jar;target/lib/*" `
            cl.playground.cli.CommandLineApp
      - name: List Generated Files
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Get-ChildItem -Path .
      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: sqlift-windows-x64.exe
          path: sqlift-windows-x64.exe

      - name: Upload artifact (Linux/MacOS)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output_name }}
          path: |
            ${{ matrix.output_name }}
            sqlift-macos-arm64

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: List Downloaded Artifacts
        run: ls -R

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            sqlift-linux-x64/sqlift-linux-x64
            sqlift-macos-x64/sqlift-macos-x64
            sqlift-macos-arm64/sqlift-macos-arm64
            sqlift-windows-x64.exe/sqlift-windows-x64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}